# Catalogue

## 1 Two Sum

### Description
Given an array of integers, return **indices** of the two numbers such that they add up to a specific target.
You may assume that each input would have **exactly** one solution, and you may not use the same element twice.

**Example**


>Given nums = [2, 7, 11, 15], target = 9,
>
>Because nums[0] + nums[1] = 2 + 7 = 9,
>return [0, 1].


Result:[Two Sum](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/twoSum.py)

## 2 Add Two Numbers

### Description
You are given two **non-empty** linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
**Input**: (2 -> 4 -> 3) + (5 -> 6 -> 4)
**Output**: 7 -> 0 -> 8

**题目理解**：累加的函数，链表的头是个位，以此类推。例子按照十进制加减就是：342 + 465 =807。在实现过程中，注意进位。
Result:[Add Two Numbers](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/2_addTwoNumbers.py)

## 7 Reverse Integer

### Description
Reverse digits of an integer.
**Example1**: x = 123, return 321
**Example2**: x = -123, return -321

**Note**:
The input is assumed to be a 32-bit signed integer. Your function should **return 0 when the reversed integer overflows**.

**题目理解**：这里要注意有个 integer overflows。

Result:[Reverse Integer](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/7_reverse_integer.py)

## 9 Palindrome Number

### Description
Determine whether an integer is a palindrome. Do this without extra space.

**理解题目**：判断一个整形数字是否是回文。

[click to show spoilers.](https://leetcode.com/problems/palindrome-number/#/description)

Result:[Palindrome Number](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/9_palindromeNumber.py)

## 13 Roman to Integer

### Description
Given a roman numeral, convert it to an integer.
Input is guaranteed to be within the range from 1 to 3999.

**题目理解**: 将罗马数字转换成整型数字。首先要理解罗马数字的计算方式。大数左边的为减右边是加。

Result:[Roman to Integer](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/13_romanToint.py)

## 14 Longest Common Prefix

### Description
Write a function to find the longest common prefix string amongst an array of strings.

Result:[Longest Common Prefix](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/14_LongestCommonPrefix.py)

## 20 Valid Parentheses

### Description
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.

**题目理解**：这道题用栈的方式实现，遍历字符串，检验到左括号入栈，检验到右括号时，出栈检验是否匹配，最后检验栈是否为空，排除右括号缺失的情况。

Result:[Valid Parentheses](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/20_ValidParentheses.py)

## 21 Merge Two Sorted Lists

### Description
Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

**题目理解** 合并两个有序链表，合成的列表也是有序的。方法是，创建一个新的节点，穿插连接两个输入链表。

Result：[Merge Two Sorted Lists](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/21_MergeTwoSortedLists.py)

## 26 Remove Duplicates from Sorted Array

### Description
Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.
**Do not allocate extra space for another array, you must do this in place with constant memory.**

For example,
Given input array *nums = [1,1,2]*,

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the new length.

Result:[Remove Duplicates from Sorted Array](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/26_RmDuplicatesFSortedArray.py)

## 27 Remove Element

### Description
Given an array and a value, remove all instances of that value in place and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

**Example:**
Given input array nums = [3,2,2,3], val = 3

Your function should return length = 2, with the first two elements of nums being 2.

**题目理解**：和[26 Remove Duplicates from Sorted Array](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/Catalogue.mdown#26-remove-duplicates-from-sorted-array) 类似，在原列表中设置两个指针，一个进行遍历，另一个进行赋值并计算新的length

Result:[Remove Element](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/27_RemoveElement.py)

## 28 Implement strStr()

### Description
Implement strStr().

Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

**题目理解**: 简单的算法，复杂度O(n^2),可以使用kmp算法将复杂度降至O(n)

Result:[Implement strStr()](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/28_strStr.py)

## 35 Search Insert Position

### Description
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
>[1,3,5,6], 5 → 2

>[1,3,5,6], 2 → 1

>[1,3,5,6], 7 → 4

>[1,3,5,6], 0 → 0

[View in Leetcode](https://leetcode.com/problems/search-insert-position/#/description)

Result: [Search Insert Position](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/35_SearchInsert.py)

## 38 Count and Say

### Description
The count-and-say sequence is the sequence of integers beginning as follows:
1, 11, 21, 1211, 111221, ...

>1 is read off as "one 1" or 11.

>11 is read off as "two 1s" or 21.

>21 is read off as "one 2, then one 1" or 1211.

Given an integer n, generate the nth sequence.

Note: The sequence of integers will be represented as a string.

**题目理解**: 需要用到迭代。

[View in Leetcode](https://leetcode.com/problems/count-and-say/#/description)

Result: [Count and Say](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/38_CountAndSay.py)

## 53 Maximum Subarray

### Description
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.

[Maximum Subarray](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/53_maxSubArray.py)

## 58 Length of Last Word

### Description
Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word in the string.

If the last word does not exist, return 0.

**Note:** A word is defined as a character sequence consists of non-space characters only.

For example,
Given s = **"Hello World"**,
return **5**.

Result: [Length of Last Word](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/58_LenLastWord.py)

## 66 Plus One

### Description
Given a non-negative integer represented as a **non-empty** array of digits, plus one to the integer.

You may assume the integer do not contain any leading zero, except the number 0 itself.

The digits are stored such that the most significant digit is at the head of the list.

Result: [Plus One](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/66_PlusOne.py)

## 67 Add Binary

### Description
Given two binary strings, return their sum (also a binary string).

For example,
a = "11"
b = "1"
Return "100".

[view in Leetcode](https://leetcode.com/problems/add-binary/#/description)

Result: [Add Binary](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/67_addBinary.py)

## 69 Sqrt(x)

### Description
Implement int sqrt(int x).
Compute and return the square root of x.

[view in Leetcode](https://leetcode.com/problems/sqrtx/#/description)

分析：此题需要返回的值是int形式的，所以用二分法最为合适，如果计算float格式平方根，可以使用牛顿迭代法。

Result: [Sqrt(x)](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/69_mysqrt_1.py)

## 70 Climbing Stairs

### Description
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

**Note** : Given n will be a positive integer.

[view in Leetcode](https://leetcode.com/problems/climbing-stairs/#/description)

Result: [Climbing Stairs](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/70_climbStairs.py)

## 83 Remove Duplicates from Sorted List

### Description
Given a sorted linked list, delete all duplicates such that each element appear only once.

For example,

Given **1->1->2**, return **1->2**.

Given **1->1->2->3->**3, return **1->2->3**.

[view in leetcode](https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/)

[Solution](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/083_Remove_Duplicates_1.py)

## 88 Merge Sorted Array
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

**Note**:

You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.

[view in leetcode](https://leetcode.com/problems/merge-sorted-array/description/)

[Solution](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/088_Merge_Sorted_Array.py)

## 94 Binary Tree Inorder Traversal

### Description
Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree **[1,null,2,3]**,
```
   1
    \
     2
    /
   3
```
return **[1,3,2]**.

中序非递归遍历。

[Solution](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/94_Binary_Tree_Inorder_Traversal.py)

## 121 Best Time to Buy and Sell Stock

### Description
Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

**Example 1**
```
Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
```
**Example 2**
```
Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.
```

**理解**
需要保存的值为最小值min和最大差值，如果当前值小于min，则进行替换，如果大于当前值，则进行相减并比较最大差值。

[Solution](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/100-199/121_Best_time_Stock.py)

## 122 Best Time to Buy and Sell Stock II

### Description
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

**理解**

与上一题不同的是，这里可以进行多次买卖，来进行最大的收益。与真实的股票买卖不同，这里没有本金的概念，每次出入一份，而且入的时候须保证手上没有元素。

**思考**

通用算法为：
选取一个min 如果碰到更小则进行替换，碰到当前值下一位是减小的情况下进行差值计算，并累积这个差值。
经过思考，更新算法：
保存一个low值，一个为high值。
如果当前元素比low小，则替换low，如果当前元素比high大则替换high，如果比high小，说明上一个值已经是上个阶段的最大值，此时进行profit计算，并把low与high值赋值为当前值。

### 实例
**[2,1,3,5,2,7]**

**[3,2,1]**

[Solution](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/100-199/122_Best_time_Stock_2.py)

## 125 Valid Palindrome

### Description
Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

For example,
**"A man, a plan, a canal: Panama"** is a palindrome.
**"race a car"** is not a palindrome.

**Note:**
Have you consider that the string might be empty? This is a good question to ask during an interview.

For the purpose of this problem, we define empty string as valid palindrome.

**思考**

普通的回文问题，需要做的是忽略特殊字符，然后一头一尾回文匹配。

[Solution](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/100-199/125_Valid_Palindrome.py)

## Single Number

### Description
Given an array of integers, every element appears twice except for one. Find that single one.

**Note:**
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

**思考**

这里有一个讨巧的方式，x异或x为0，而任何数异或0得到本身。

## 141 Linked List Cycle

### Description
Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

**思考**

常规算法：
设定两个指针a与b，a每走一步b从头开始走，若b = a.next 则说明此链表有环。若a = b说明还没有判断出是否有环，a再走一步，b从头开始。当a.next = None 则说明此链表没有环。时间复杂度为 O(n^2)

改善版：
同样设定两个指针a与b，a的速度为b的两倍。如果这个链表有环...他们总有一天会相遇的😳。时间复杂度为O(n)。

## 144 Binary Tree Preorder Traversal

### Description

Given a binary tree, return the preorder traversal of its nodes' values.

**For example**:
Given binary tree {1,#,2,3},
```
   1
    \
     2
    /
   3
```
return **[1,2,3]**.

前序遍历，用非递归的方式做的吧，需要一个辅助的栈，保存每一个根节点。然后先判断左孩子，没有的话，提取栈顶判断右孩子。

[Solution](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/100-199/144_Binary_Tree_Preorder_Traversal.py)

## 155 Min Stack

### Description
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

* push(x) -- Push element x onto stack.
* pop() -- Removes the element on top of the stack.
* top() -- Get the top element.
* getMin() -- Retrieve the minimum element in the stack.

**Example**

```
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
```
**思考**

这里需要用stack来返回栈中的最小值，因为如果是用int，一旦当前最小时pop出去，无法找到第二小的元素了。还有一个要注意的地方的是，push一个等于minstack 顶部的数时，也要把他push进min stack。

## 160 Intersection of Two Linked Lists

### Description

Write a program to find the node at which the intersection of two singly linked lists begins.
For example, the following two linked lists:
```
A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
```
begin to intersect at node c1.
**Notes:**
* If the two linked lists have no intersection at all, return null.
* The linked lists must retain their original structure after the function returns.
* You may assume there are no cycles anywhere in the entire linked structure.
* Your code should preferably run in O(n) time and use only O(1) memory.
**Credits:**
Special thanks to [@stellari](https://oj.leetcode.com/discuss/user/stellari) for adding this problem and creating all test cases.

**思考**

基础思路：
遍历两条链表记录长度，计算差值，然后让长的那条线走几步，指针相同的时候就是节点。如果末尾不同就是没有节点。

进阶思路：
当指针走到末尾的时候，从另一条链表的开头开始继续移动，这样会导致两种情况：
1. 在节点处相遇
2. 同时到达对方的末尾
因为它们走过的路程是一样的。

## 167 Two Sum II - Input array is sorted

### Description

Given an array of integers that is already **sorted in ascending order**, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.

You may assume that each input would have exactly one solution and you may not use the same element twice.

**Input**: numbers={2, 7, 11, 15}, target=9
**Output**: index1=1, index2=2

**思考**

这个题目可以用暴力算法来求解的，但是又更忧解，我的想法是用哈希表。key为需要匹配的数（也就是 tagart减去本身），value保存这个值的index（注意题目 输出的index比实际大1）。进行遍历，如果当前值不在哈希表中，则建立新的一行。如果在哈希表中找到这个key，则输出value和这个数在列表中的index。

## 168 Excel Sheet Column Title

### Description

Given a positive integer, return its corresponding column title as appear in an Excel sheet.

For example:
```
1 -> A
    2 -> B
    3 -> C
    ...
    26 -> Z
    27 -> AA
    28 -> AB
```
**思考**

十进制和26进制的转换。注意转换之后是从A开始的，不是零。在求余数的时候注意要减去1。然后用ASCII码进行转换。

## 169 Majority Element

### Description
Given an array of size n, find the majority element. The majority element is the element that appears **more than** ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

**Credits**:
Special thanks to [@ts](https://oj.leetcode.com/discuss/user/ts) for adding this problem and creating all test cases.

用哈希表保存数字的计数。

## 171 Excel Sheet Column Number

### Description

Given a column title as appear in an Excel sheet, return its corresponding column number.

For example:
```
    A -> 1
    B -> 2
    C -> 3
    ...
    Z -> 26
    AA -> 27
    AB -> 28
```

## 172 Factorial Trailing Zeroes

### Description

Given an integer n, return the number of trailing zeroes in n!.

**Note**: Your solution should be in logarithmic time complexity.

数5的个数。

## 189 Rotate Array

### Description

Rotate an array of n elements to the right by k steps.

For example, with n = 7 and k = 3, the array **[1,2,3,4,5,6,7]** is rotated to **[5,6,7,1,2,3,4]**.

**Note**:
Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.

## 190 Reverse Bits

### Description

Reverse bits of a given 32 bits unsigned integer.

For example, given input 43261596 (represented in binary as 00000010100101000001111010011100), return 964176192 (represented in binary as 00111001011110000010100101000000).

## 191 Number of 1 Bits

### Description

Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the Hamming weight).

For example, the 32-bit integer ’11' has binary representation 00000000000000000000000000001011, so the function should return 3.

Hamming Weight 有好多中算法。具体并没有研究。 普通的位操作并不能通过效率检测。

## 202 Happy Number

### Description

Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example: 19 is a happy number

1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1

**思考**
如果不是开心数，那么计算的sum一定是一个循环。建立一个stack，存放计算出的sum，一旦新计算出来的sum已经在stack中，则说明这个数不是开心数。反之，一旦sum为1， 那么这个数为开心数。

## 203 Remove Linked List Elements

### Description

Remove all elements from a linked list of integers that have value val.

Example
Given: 1 --> 2 --> 6 --> 3 --> 4 --> 5 --> 6, val = 6
Return: 1 --> 2 --> 3 --> 4 --> 5

简单的单向链表元素删除，对于链表头的删除，是一种特例，可以为链表头前加一个辅助的节点，数值任意，最后返回的值是head.next,也就是去除辅助节点。而对于删除来说需要做的是设定两个指针，一前一后。当后指针的值等于val，则前指针的next等于后指针的next。


## 204 Count Primes

### Description

Description:

Count the number of prime numbers less than a non-negative number, n.

这里有好多解法。普通算法的时间复杂度很高，还有一个种算法叫做[埃拉托斯特尼筛法](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)。但是用这种筛选法用python来实现在leetcode上有TLE问题的。答案种提供了另外一种优化。可以看一下。

## 205 Isomorphic Strings

### Description

Given two strings s and t, determine if they are isomorphic.

Two strings are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.

For example,
Given **"egg"**, **"add"**, return true.

Given **"foo"**, **"bar"**, return false.

Given **"paper"**, **"title"**, return true.

这里不需要做替换。只需要建立的hash表，看每一个字符是否有对应。需要注意的是，不仅key的值是唯一的，也要注意value的值也是要唯一的。

## 206 Reverse Linked List

### Description

Reverse a singly linked list.

solution 用了递归的思想。需要加强这方面的思想。

## 217 Contains Duplicate

### Description

Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.

用哈希表的方式会TLE，所以使用了先排序后比较前后值，复杂就依赖于排序算法了。

## 219 Contains Duplicate II

### Description 

Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that **nums[i]** = **nums[j]** and the **absolute** difference between i and j is at most k.

用哈希表来储存index，如果已经存在则进行比较。如果小于k，则返回True，反之覆盖原来的index。

## 225 Implement Stack using Queues

### Description

Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
**Notes:**
You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).

可以使用双端队列就很简单啦。python初始双端队列的方式要知道。

## 226 Invert Binary Tree

### Description

Invert a binary tree.
```

     4
   /   \
  2     7
 / \   / \
1   3 6   9
to
     4
   /   \
  7     2
 / \   / \
9   6 3   1
```

常规思路就是递归。同样也可以使用栈的方式去实现。

## 231 Power of Two

### Description

Given an integer, write a function to determine if it is a power of two.

依旧可以使用递归思想。还有一种巧妙的方式：如果 n为2的次方，那么二进制 n与n-1 为 0.

## 232 Implement Queue using Stacks

### Description

Implement the following operations of a queue using stacks.

- push(x) -- Push element x to the back of queue.
- pop() -- Removes the element from in front of queue.
- peek() -- Get the front element.
- empty() -- Return whether the queue is empty.

**Notes:**

- You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
- Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
- You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).

## 234 Palindrome Linked List

### Description

Given a singly linked list, determine if it is a palindrome.

Follow up:
Could you do it in O(n) time and O(1) space?

**思考**
单向链表查找父级元素比较复杂。可以选择list来储存值来进行比较。一种是全部储存到list，这样的空间复杂度为O(n)，一种是存储一半，用链表和list进行比较。空间复杂度为(n/2)。这里提供一个找到中点的方式：设置两个指针，一个指针每次走一位，一个指针一次走两位，当快的指针到尾端时，慢的指针在中点。对与题目中的follow up， 空间复杂度为O(1)，那么只能用到指针了。做法是将后半段逆序处理，然后逐一比较。

## 235 Lowest Common Ancestor of a Binary Search Tree

### Description

Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the [definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow **a node to be a descendant of itself**).”

```
        _______6______
       /              \
    ___2__          ___8__
   /      \        /      \
   0      _4       7       9
         /  \
         3   5
```

For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.

**思考** 

因为是二叉搜索树，所以只需要比较val，p，q在node异侧则说明node为公共祖先。

## 237 Delete Node in a Linked List

### Description

Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.

Supposed the linked list is 1 -> 2 -> 3 -> 4 and you are given the third node with value 3, the linked list should become 1 -> 2 -> 4 after calling your function.

## 242 Valid Anagram

### Description

Given two strings s and t, write a function to determine if t is an anagram of s.

For example,
s = "anagram", t = "nagaram", return true.
s = "rat", t = "car", return false.

Note:
You may assume the string contains only lowercase alphabets.

Follow up:
What if the inputs contain unicode characters? How would you adapt your solution to such case?

转化成list，排序再进行比对。

## 258 Add Digits

### Description

Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.

For example:

Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.

**Follow up**:
Could you do it without any loop/recursion in O(1) runtime?

O(1) Algorithms: return (num -1) % 9 + 1

## 263 Ugly Number

### Description

Write a program to check whether a given number is an ugly number.

Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 6, 8 are ugly while 14 is not ugly since it includes another prime factor 7.

Note that 1 is typically treated as an ugly number.

## 278 First Bad Version

### Description

You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

二分查找

## 283 Move Zeros

### Description

Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].

Note:
You must do this in-place without making a copy of the array.
Minimize the total number of operations.

设置两个指针，一个为常指针，遍历整个list，常指针找到一个非零数，则进行赋值并指向后一位。

## 290 Word Pattern

### Description

Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

**Examples:**
- pattern = "abba", str = "dog cat cat dog" should return true.
- pattern = "abba", str = "dog cat cat fish" should return false.
- pattern = "aaaa", str = "dog cat cat dog" should return false.
- pattern = "abba", str = "dog dog dog dog" should return false.
**Notes:**
You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.

## 292 Nim Game

### Description

You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.

Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.

For example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.

只要不是4的倍数就能赢。。


## 303 Range Sum Query - Immutable

### Description

Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.

**Example:**

Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0, 5) -> -3

**Note:**

1. You may assume that the array does not change.
2. There are many calls to sumRange function.

为了防止TLE，在初始object的时候，计算出前n个数的和，这样在调用的时候，可以利用减法直接得出结论。

## 326 Power of Three

Given an integer, write a function to determine if it is a power of three.

Follow up:
Could you do it without using any loop / recursion?

方法一：数学方法， x = log(n)/log(3)
方法二：利用计算机的特性，算出float范围中，最大的3的倍数幂数。

## 342 Power of Four

### Description

Given an integer (signed 32 bits), write a function to check whether it is a power of 4.

Example:
Given num = 16, return true. Given num = 5, return false.

Follow up: Could you solve it without loops/recursion?

进行位运算。判断1是不是在奇数位。

## 344 Reverse String

### Description

Write a function that takes a string as input and returns the string reversed.

**Example**:
Given s = "hello", return "olleh".

## 345 Reverse Vowels of a String

### Description

Write a function that takes a string as input and reverse only the vowels of a string.

**Example 1**:
Given s = "hello", return "holle".

**Example 2**:
Given s = "leetcode", return "leotcede".

**Note**:
The vowels does not include the letter "y".


## 349 Intersection of Two Arrays

### Description

Given two arrays, write a function to compute their intersection.

**Example**:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].

**Note**:
* Each element in the result must be unique.
* The result can be in any order.

这里求的是集合，并不是匹配列表呢。python有集合处理的function，使用set把列表转换成集，然后进行逻辑运算。

## 350 Intersection of Two Arrays

### Description

Given two arrays, write a function to compute their intersection.

**Example**:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].

**Note**:

Each element in the result should appear as many times as it shows in both arrays.
The result can be in any order.
**Follow up**:
* What if the given array is already sorted? How would you optimize your algorithm?
* What if nums1's size is small compared to nums2's size? Which algorithm is better?
* What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the * * memory at once?

数组元素计数的问题，都比较推荐用哈希表去计数。

## 367 Valid Perfect Square

### Description

Given a positive integer num, write a function which returns True if num is a perfect square else False.

Note: Do not use any built-in library function such as sqrt.

**Example 1**:
```
Input: 16
Returns: True
```
**Example 2**:
```
Input: 14
Returns: False
```

可以用二分查找。O(lgN)

## 371 Sum of Two Integers

### Description

Calculate the sum of two integers a and b, but you are **not allowed** to use the operator + and -.

**Example**:
Given a = 1 and b = 2, return 3.

利用位运算进行加法运算，python没能实现，用了c++。

## 374 Guess Number Higher or Lower

### Description

We are playing the Guess Game. The game is as follows:

I pick a number from 1 to n. You have to guess which number I picked.

Every time you guess wrong, I'll tell you whether the number is higher or lower.

You call a pre-defined API guess(int num) which returns 3 possible results (-1, 1, or 0):
```
-1 : My number is lower
 1 : My number is higher
 0 : Congrats! You got it!
 ```
**Example**:
```
n = 10, I pick 6.

Return 6.
```

利用二分查找猜测数字大小。

## 383 Ransom Note

### Description

Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.

Each letter in the magazine string can only be used once in your ransom note.

Note:
You may assume that both strings contain only lowercase letters.
```
canConstruct("a", "b") -> false
canConstruct("aa", "ab") -> false
canConstruct("aa", "aab") -> true
```

用哈希表记录字母出现的次数，进行验证。

## 387 First Unique Character in a String

### Description

Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

**Examples**:
```
s = "leetcode"
return 0.

s = "loveleetcode",
return 2.
```
**Note**: You may assume the string contain only lowercase letters.

用了哈希表计数，更好的方式是：直接计算出现的次数并生成列表。

```
index=[s.index(l) for l in letters if s.count(l) == 1]
```

## 389 Find the Difference

### Description

Given two strings s and t which consist of only lowercase letters.

String t is generated by random shuffling string s and then add one more letter at a random position.

Find the letter that was added in t.

**Example**:
```
Input:
s = "abcd"
t = "abcde"

Output:
e

Explanation:
'e' is the letter that was added.
```

因为t相较于s多了一个字符，返回的也是字符，可以对s，t进行排序，然后逐一比较，第一个不同的元素是被查找的数字。

## Nth Digit

### Description

Find the nth digit of the infinite integer sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...

**Note**:
n is positive and will fit within the range of a 32-bit signed integer (n < 231).

**Example 1**:
```
Input:
3

Output:
3
```
**Example 2**:
```
Input:
11

Output:
0

Explanation:
The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.
```

要注意n的起始值。

## 401 Binary Watch

### Description

A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).

Each LED represents a zero or one, with the least significant bit on the right.

Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.

**Example**:
```
Input: n = 1
Return: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]
```
**Note**:
* The order of output does not matter.
* The hour must not contain a leading zero, for example "01:00" is not valid, it should be "1:00".
* The minute must be consist of two digits and may contain a leading zero, for example "10:2" is not valid, it should be "10:02".

在遍历的可能性小的情况下，可以选择枚举比较，符合条件的入栈。这里需要掌握的是bin()函数，转换数字为二进制string，已经count()数string中char的数量。

## 404 Sum of Left Leaves

### Description

Find the sum of all left leaves in a given binary tree.

**Example**:
```
    3
   / \
  9  20
    /  \
   15   7

There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.
```

## Convert a Number to Hexadecimal

### Description

Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, two’s complement method is used.

**Note**:

1. All letters in hexadecimal (a-f) must be in lowercase.
2. The hexadecimal string must not contain extra leading 0s. If the number is zero, it is represented by a single zero character '0'; otherwise, the first character in the hexadecimal string will not be the zero character.
3. The given number is guaranteed to fit within the range of a 32-bit signed integer.
4. You must not use any method provided by the library which converts/formats the number to hex directly.
**Example 1**:
```
Input:
26

Output:
"1a"
```
Example 2:
```
Input:
-1

Output:
"ffffffff"
```

有关2进制的问题都可以试着考虑位运算。

## 409 Longest Palindrome

### Description

Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.

This is case sensitive, for example "Aa" is not considered a palindrome here.

**Note**:
Assume the length of given string will not exceed 1,010.

**Example**:
```
Input:
"abccccdd"

Output:
7

Explanation:
One longest palindrome that can be built is "dccaccd", whose length is 7.
```

我用的是哈希表计数，然后最后进行累加，某一char是单数的话就-1，如果存在单数的话，累计一次。
在答案中，提供了一个网上的讨论，更加简洁。直接数出现奇数次的元素的个数，再从总长中减去这个值，如果存在奇数次数的元素，最后加1.

## Fizz Buzz

### Description

Write a program that outputs the string representation of numbers from 1 to n.

But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.

**Example**:
```
n = 15,

Return:
[
    "1",
    "2",
    "Fizz",
    "4",
    "Buzz",
    "Fizz",
    "7",
    "8",
    "Fizz",
    "Buzz",
    "11",
    "Fizz",
    "13",
    "14",
    "FizzBuzz"
]
```

写对判断条件就好啦。

## 414 Third Maximum Number

### Description

Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

**Example 1**:
```
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
```
**Example 2**:
```
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
```
**Example 3**:
```
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.
```

设一个list保存最大的三个数，在替换list的值的时候，注意判断是否已经存在这个数。

## 415 Add String

### Description

Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2.

**Note**:

1. The length of both num1 and num2 is < 5100.
2. Both num1 and num2 contains only digits 0-9.
3. Both num1 and num2 does not contain any leading zero.
4. You must not use any built-in BigInteger library or convert the inputs to integer directly.

计算的时候别忘记进位。

## 434 Number of Segments in a String

### Description

Count the number of segments in a string, where a segment is defined to be a contiguous sequence of non-space characters.

Please note that the string does not contain any non-printable characters.

**Example**:
```
Input: "Hello, my name is John"
Output: 5
```

在python中，就是分割string，再返回list的长度。

## 441 Arranging Coins

### Description

You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.

Given n, find the total number of full staircase rows that can be formed.

n is a non-negative integer and fits within the range of a 32-bit signed integer.

**Example 1**:
```
n = 5

The coins can form the following rows:
¤
¤ ¤
¤ ¤

Because the 3rd row is incomplete, we return 2.
```
**Example 2**:
```
n = 8

The coins can form the following rows:
¤
¤ ¤
¤ ¤ ¤
¤ ¤

Because the 4th row is incomplete, we return 3.
```

在逐步逼近查找终值的时候，考虑二分查找，注意判断条件。

## 447 Number of Boomerangs

### Description

Given n points in the plane that are all pairwise distinct, a "boomerang" is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (**the order of the tuple matters**).

Find the number of boomerangs. You may assume that n will be at most **500** and coordinates of points are all in the range **[-10000, 10000]** (inclusive).

**Example:**
```
Input:
[[0,0],[1,0],[2,0]]

Output:
2

Explanation:
The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]
```

常规思路是取三个值，进行比较，距离相等则累加，这样的时间复杂度是O(n^3)，在刷了这么多的题之后，觉得使用hash表的方式，可以降低一级复杂度，这里的solution也用到了哈希表：
1. 取一个点i，并建立一个空的哈希表，开始取第二个点j
2. 哈希表的结构为：j到i的距离=>与这个距离一样的j点的数量
3. 所有特定距离的j点的排列组合

## 448 Find All Numbers Disappeared in an Array

## Description

Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:
```
Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]
```

思路：遍历数组，当前数x，将位置为x-1的数变为负数，意思为：如果位置x-1为负数，那么这个数已经出现过。最后再次遍历数组，将正数的位置找出。

## 453 Minimum Moves to Equal Array Elements

### Description

Given a non-empty integer array of size n, find the minimum number of moves required to make all array elements equal, where a move is incrementing n - 1 elements by 1.

**Example**:
```
Input:
[1,2,3]

Output:
3

Explanation:
Only three moves are needed (remember each move increments two elements):

[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]
```

每次变动n-1个元素，增加1，相当于一个元素减去1，那么让其他元素等于最小值就可以。

## 455 Assign Cookies

### Description

Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj >= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.

**Note**:
You may assume the greed factor is always positive. 
You cannot assign more than one cookie to one child.

**Example 1:**
```
Input: [1,2,3], [1,1]

Output: 1

Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. 
And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.
You need to output 1.
```
**Example 2:**
```
Input: [1,2], [1,2,3]

Output: 2

Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. 
You have 3 cookies and their sizes are big enough to gratify all of the children, 
You need to output 2.
```

排序，让最小size的cookie去匹配greed。

## 459 Repeated Substring Pattern

### Description

Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.

**Example 1:**
```
Input: "abab"

Output: True

Explanation: It's the substring "ab" twice.
```
**Example 2:**
```
Input: "aba"

Output: False
```
**Example 3:**
```
Input: "abcabcabcabc"

Output: True

Explanation: It's the substring "abc" four times. (And the substring "abcabc" twice.)
```

如果满足条件，那么被截取的字符串是原字符串长度的约数。生成一个新的字符串：被截取的字符串复制n次，如果和原字符串相等，那么返回值为True。
























