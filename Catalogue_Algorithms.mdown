# Catalogue

## 1 Two Sum

### Description
Given an array of integers, return **indices** of the two numbers such that they add up to a specific target.
You may assume that each input would have **exactly** one solution, and you may not use the same element twice.

**Example**


>Given nums = [2, 7, 11, 15], target = 9,
>
>Because nums[0] + nums[1] = 2 + 7 = 9,
>return [0, 1].


Result:[Two Sum](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/twoSum.py)

## 2 Add Two Numbers

### Description
You are given two **non-empty** linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
**Input**: (2 -> 4 -> 3) + (5 -> 6 -> 4)
**Output**: 7 -> 0 -> 8

**题目理解**：累加的函数，链表的头是个位，以此类推。例子按照十进制加减就是：342 + 465 =807。在实现过程中，注意进位。
Result:[Add Two Numbers](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/2_addTwoNumbers.py)

## 7 Reverse Integer

### Description
Reverse digits of an integer.
**Example1**: x = 123, return 321
**Example2**: x = -123, return -321

**Note**:
The input is assumed to be a 32-bit signed integer. Your function should **return 0 when the reversed integer overflows**.

**题目理解**：这里要注意有个 integer overflows。

Result:[Reverse Integer](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/7_reverse_integer.py)

## 9 Palindrome Number

### Description
Determine whether an integer is a palindrome. Do this without extra space.

**理解题目**：判断一个整形数字是否是回文。

[click to show spoilers.](https://leetcode.com/problems/palindrome-number/#/description)

Result:[Palindrome Number](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/9_palindromeNumber.py)

## 13 Roman to Integer

### Description
Given a roman numeral, convert it to an integer.
Input is guaranteed to be within the range from 1 to 3999.

**题目理解**: 将罗马数字转换成整型数字。首先要理解罗马数字的计算方式。大数左边的为减右边是加。

Result:[Roman to Integer](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/13_romanToint.py)

## 14 Longest Common Prefix

### Description
Write a function to find the longest common prefix string amongst an array of strings.

Result:[Longest Common Prefix](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/14_LongestCommonPrefix.py)

## 20 Valid Parentheses

### Description
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.

**题目理解**：这道题用栈的方式实现，遍历字符串，检验到左括号入栈，检验到右括号时，出栈检验是否匹配，最后检验栈是否为空，排除右括号缺失的情况。

Result:[Valid Parentheses](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/20_ValidParentheses.py)

## 21 Merge Two Sorted Lists

### Description
Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

**题目理解** 合并两个有序链表，合成的列表也是有序的。方法是，创建一个新的节点，穿插连接两个输入链表。

Result：[Merge Two Sorted Lists](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/21_MergeTwoSortedLists.py)

## 26 Remove Duplicates from Sorted Array

### Description
Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.
**Do not allocate extra space for another array, you must do this in place with constant memory.**

For example,
Given input array *nums = [1,1,2]*,

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the new length.

Result:[Remove Duplicates from Sorted Array](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/26_RmDuplicatesFSortedArray.py)

## 27 Remove Element

### Description
Given an array and a value, remove all instances of that value in place and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

**Example:**
Given input array nums = [3,2,2,3], val = 3

Your function should return length = 2, with the first two elements of nums being 2.

**题目理解**：和[26 Remove Duplicates from Sorted Array](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/Catalogue.mdown#26-remove-duplicates-from-sorted-array) 类似，在原列表中设置两个指针，一个进行遍历，另一个进行赋值并计算新的length

Result:[Remove Element](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/27_RemoveElement.py)

## 28 Implement strStr()

### Description
Implement strStr().

Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

**题目理解**: 简单的算法，复杂度O(n^2),可以使用kmp算法将复杂度降至O(n)

Result:[Implement strStr()](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/28_strStr.py)

## 35 Search Insert Position

### Description
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
>[1,3,5,6], 5 → 2

>[1,3,5,6], 2 → 1

>[1,3,5,6], 7 → 4

>[1,3,5,6], 0 → 0

[View in Leetcode](https://leetcode.com/problems/search-insert-position/#/description)

Result: [Search Insert Position](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/35_SearchInsert.py)

## 38 Count and Say

### Description
The count-and-say sequence is the sequence of integers beginning as follows:
1, 11, 21, 1211, 111221, ...

>1 is read off as "one 1" or 11.

>11 is read off as "two 1s" or 21.

>21 is read off as "one 2, then one 1" or 1211.

Given an integer n, generate the nth sequence.

Note: The sequence of integers will be represented as a string.

**题目理解**: 需要用到迭代。

[View in Leetcode](https://leetcode.com/problems/count-and-say/#/description)

Result: [Count and Say](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/0-99/38_CountAndSay.py)

## 53 Maximum Subarray

### Description
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.

[Maximum Subarray](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/53_maxSubArray.py)

## 58 Length of Last Word

### Description
Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word in the string.

If the last word does not exist, return 0.

**Note:** A word is defined as a character sequence consists of non-space characters only.

For example,
Given s = **"Hello World"**,
return **5**.

Result: [Length of Last Word](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/58_LenLastWord.py)

## 66 Plus One

### Description
Given a non-negative integer represented as a **non-empty** array of digits, plus one to the integer.

You may assume the integer do not contain any leading zero, except the number 0 itself.

The digits are stored such that the most significant digit is at the head of the list.

Result: [Plus One](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/66_PlusOne.py)

## 67 Add Binary

### Description
Given two binary strings, return their sum (also a binary string).

For example,
a = "11"
b = "1"
Return "100".

[view in Leetcode](https://leetcode.com/problems/add-binary/#/description)

Result: [Add Binary](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/67_addBinary.py)

## 69 Sqrt(x)

### Description
Implement int sqrt(int x).
Compute and return the square root of x.

[view in Leetcode](https://leetcode.com/problems/sqrtx/#/description)

分析：此题需要返回的值是int形式的，所以用二分法最为合适，如果计算float格式平方根，可以使用牛顿迭代法。

Result: [Sqrt(x)](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/69_mysqrt_1.py)

## 70 Climbing Stairs

### Description
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

**Note** : Given n will be a positive integer.

[view in Leetcode](https://leetcode.com/problems/climbing-stairs/#/description)

Result: [Climbing Stairs](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/70_climbStairs.py)

## 83 Remove Duplicates from Sorted List

### Description
Given a sorted linked list, delete all duplicates such that each element appear only once.

For example,

Given **1->1->2**, return **1->2**.

Given **1->1->2->3->**3, return **1->2->3**.

[view in leetcode](https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/)

[Solution](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/083_Remove_Duplicates_1.py)

## 88 Merge Sorted Array
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

**Note**:

You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.

[view in leetcode](https://leetcode.com/problems/merge-sorted-array/description/)

[Solution](https://github.com/NaughtyFlame/LeetCode/tree/master/Algorithms/0-99/088_Merge_Sorted_Array.py)

## 121 Best Time to Buy and Sell Stock

### Description
Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

**Example 1**
```
Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
```
**Example 2**
```
Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.
```

**理解**
需要保存的值为最小值min和最大差值，如果当前值小于min，则进行替换，如果大于当前值，则进行相减并比较最大差值。

[Solution](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/100-199/121_Best_time_Stock.py)

## 122 Best Time to Buy and Sell Stock II

### Description
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

**理解**

与上一题不同的是，这里可以进行多次买卖，来进行最大的收益。与真实的股票买卖不同，这里没有本金的概念，每次出入一份，而且入的时候须保证手上没有元素。

**思考**

通用算法为：
选取一个min 如果碰到更小则进行替换，碰到当前值下一位是减小的情况下进行差值计算，并累积这个差值。
经过思考，更新算法：
保存一个low值，一个为high值。
如果当前元素比low小，则替换low，如果当前元素比high大则替换high，如果比high小，说明上一个值已经是上个阶段的最大值，此时进行profit计算，并把low与high值赋值为当前值。

### 实例
**[2,1,3,5,2,7]**

**[3,2,1]**

[Solution](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/100-199/122_Best_time_Stock_2.py)

## 125 Valid Palindrome

### Description
Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

For example,
**"A man, a plan, a canal: Panama"** is a palindrome.
**"race a car"** is not a palindrome.

**Note:**
Have you consider that the string might be empty? This is a good question to ask during an interview.

For the purpose of this problem, we define empty string as valid palindrome.

**思考**

普通的回文问题，需要做的是忽略特殊字符，然后一头一尾回文匹配。

[Solution](https://github.com/NaughtyFlame/LeetCode/blob/master/Algorithms/100-199/125_Valid_Palindrome.py)

## Single Number

### Description
Given an array of integers, every element appears twice except for one. Find that single one.

**Note:**
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

**思考**

这里有一个讨巧的方式，x异或x为0，而任何数异或0得到本身。

## 141 Linked List Cycle

### Description
Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

**思考**

常规算法：
设定两个指针a与b，a每走一步b从头开始走，若b = a.next 则说明此链表有环。若a = b说明还没有判断出是否有环，a再走一步，b从头开始。当a.next = None 则说明此链表没有环。时间复杂度为 O(n^2)

改善版：
同样设定两个指针a与b，a的速度为b的两倍。如果这个链表有环...他们总有一天会相遇的😳。时间复杂度为O(n)。

## 155 Min Stack

### Description
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

* push(x) -- Push element x onto stack.
* pop() -- Removes the element on top of the stack.
* top() -- Get the top element.
* getMin() -- Retrieve the minimum element in the stack.

**Example**

```
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
```
**思考**

这里需要用stack来返回栈中的最小值，因为如果是用int，一旦当前最小时pop出去，无法找到第二小的元素了。还有一个要注意的地方的是，push一个等于minstack 顶部的数时，也要把他push进min stack。

## 160 Intersection of Two Linked Lists

### Description

Write a program to find the node at which the intersection of two singly linked lists begins.
For example, the following two linked lists:
```
A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
```
begin to intersect at node c1.
**Notes:**
* If the two linked lists have no intersection at all, return null.
* The linked lists must retain their original structure after the function returns.
* You may assume there are no cycles anywhere in the entire linked structure.
* Your code should preferably run in O(n) time and use only O(1) memory.
**Credits:**
Special thanks to [@stellari](https://oj.leetcode.com/discuss/user/stellari) for adding this problem and creating all test cases.

**思考**

基础思路：
遍历两条链表记录长度，计算差值，然后让长的那条线走几步，指针相同的时候就是节点。如果末尾不同就是没有节点。

进阶思路：
当指针走到末尾的时候，从另一条链表的开头开始继续移动，这样会导致两种情况：
1. 在节点处相遇
2. 同时到达对方的末尾
因为它们走过的路程是一样的。

## 167 Two Sum II - Input array is sorted

### Description

Given an array of integers that is already **sorted in ascending order**, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.

You may assume that each input would have exactly one solution and you may not use the same element twice.

**Input**: numbers={2, 7, 11, 15}, target=9
**Output**: index1=1, index2=2

**思考**

这个题目可以用暴力算法来求解的，但是又更忧解，我的想法是用哈希表。key为需要匹配的数（也就是 tagart减去本身），value保存这个值的index（注意题目 输出的index比实际大1）。进行遍历，如果当前值不在哈希表中，则建立新的一行。如果在哈希表中找到这个key，则输出value和这个数在列表中的index。

## 168 Excel Sheet Column Title

### Description

Given a positive integer, return its corresponding column title as appear in an Excel sheet.

For example:
```
1 -> A
    2 -> B
    3 -> C
    ...
    26 -> Z
    27 -> AA
    28 -> AB
```
**思考**

十进制和26进制的转换。注意转换之后是从A开始的，不是零。在求余数的时候注意要减去1。然后用ASCII码进行转换。

## 169 Majority Element

### Description
Given an array of size n, find the majority element. The majority element is the element that appears **more than** ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

**Credits**:
Special thanks to [@ts](https://oj.leetcode.com/discuss/user/ts) for adding this problem and creating all test cases.

用哈希表保存数字的计数。

## 171 Excel Sheet Column Number

### Description

Given a column title as appear in an Excel sheet, return its corresponding column number.

For example:
```
    A -> 1
    B -> 2
    C -> 3
    ...
    Z -> 26
    AA -> 27
    AB -> 28
```

## 172 Factorial Trailing Zeroes

### Description

Given an integer n, return the number of trailing zeroes in n!.

**Note**: Your solution should be in logarithmic time complexity.

数5的个数。

## 189 Rotate Array

### Description

Rotate an array of n elements to the right by k steps.

For example, with n = 7 and k = 3, the array **[1,2,3,4,5,6,7]** is rotated to **[5,6,7,1,2,3,4]**.

**Note**:
Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.

## 190 Reverse Bits

### Description

Reverse bits of a given 32 bits unsigned integer.

For example, given input 43261596 (represented in binary as 00000010100101000001111010011100), return 964176192 (represented in binary as 00111001011110000010100101000000).

## 191 Number of 1 Bits

### Description

Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the Hamming weight).

For example, the 32-bit integer ’11' has binary representation 00000000000000000000000000001011, so the function should return 3.

Hamming Weight 有好多中算法。具体并没有研究。 普通的位操作并不能通过效率检测。
